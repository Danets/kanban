// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  email     String   @unique
  name      String?
  passwword String

  workInterval  Int @default(45)
  breaInterval  Int @default(15)
  intervalCount Int @default(7)

  tasks            Task[]
  timeBlocks       TimeBlock[]
  pomodoroSessions PomodoroSession[]

  @@map("user")
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  priority    Priority?
  isCompleted Boolean   @default(false) @map("is_completed")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@map("task")
}

model TimeBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String
  color    String?
  duration Int
  order    Int     @default(1)

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@map("time_block")
}

model PomodoroSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  isCompleted Boolean @default(false) @map("is_completed")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  pomodoroRounds PomodoroRound[]

  @@map("pomodoro_session")
}

model PomodoroRound {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  totalSeconds Int
  isCompleted  Boolean @default(false) @map("is_completed")

  sessionId       String          @map("session_id")
  pomodoroSession PomodoroSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("pomodoro_round")
}

enum Priority {
  low
  medium
  high
}
